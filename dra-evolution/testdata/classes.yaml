# Any Foozer device, assuming all are managed by the same driver.
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: foozer.example.com
requirements:
- deviceSelector: "device.driverName == 'foozer.example.com'"
---
# A Foozer 1000 device
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: foozer-1000-example.com
requirements:
- deviceSelector: "device.stringAttributes['foozer.example.com/model'] == 'foozer-1000'"
    # Checking the driver name is not needed: devices from other vendors
    # are not going to have the foozer.model.example.com attribute.

---
# Any Barzer device
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: barzer.example.com
requirements:
- deviceSelector: "device.driverName == 'barzer.example.com'"
---
# Any example.com GPU, even though Foozer and
# Barzer GPUs use different drivers. In this case,
# "example.com GPU" is defined as "a GPU provided
# by these two drivers" (no standardization and
# no need for the driver vendors to cooperate).
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: gpu-example.com
requirements:
- deviceSelector: "device.driverName == 'foozer.example.com' || device.driverName == 'barzer.example.com'"
---
# An example.com SR-IOV NIC
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic.example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com'"
---
# An example.org SR-IOV NIC (different vendor)
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic-example.org
requirements:
- deviceSelector: "device.driverName == 'sriov.example.org'"
---
# Request any SR-IOV NIC. This will allow the claim to be satisfied by
# example.com or example.org NICs. In contrast to the gpu.example.com above,
# here it is assumed that "SR-IOV NIC" is a concept defined in a KEP which
# then also standardizes an attribute that vendors can use to declare
# that their device satisfies the requirements in that KEP. All of the
# NIC examples use attribute names from that fictional KEP.
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic
requirements:
- deviceSelector: "'nic.k8s.io/type' in device.attributes" # Doesn't care whether it's "pf" or "vf".
---
# Example.com SR-IOV NIC on a 1Gbps link
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic-1g-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.quantityAttributes['nic.k8s.io/bandwidth'].compareTo(quantity('1G')) == 0"
---
# Request an example.com 10Gbps SR-IOV NIC.
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic-10g-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.quantityAttributes['nic.k8s.io/bandwidth'].compareTo(quantity('10G')) == 0"
---
# Request an example.com 1Gbps or faster SR-IOV NIC.
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic-1g-or-faster-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.quantityAttributes['nic.k8s.io/bandwidth'].compareTo(quantity('1G')) >= 0"
---
# Request any 1Gbps or faster SR-IOV NIC, regardless of the vendor.
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-nic-1g-or-faster
requirements:
- deviceSelector: "device.quantityAttributes['nic.k8s.io/bandwidth'].compareTo(quantity('1G')) >= 0"
    # It's a NIC if it has this attribute.
---
# Request an example.com PF
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-pf-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.stringAttributes['nic.k8s.io/type'] == 'pf'"
---
# Request an example.com VF
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-vf-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.stringAttributes['nic.k8s.io/type'] == 'vf'"
---
# Request an example.com PF or VF
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: sriov-vf-example.com
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.stringAttributes['nic.k8s.io/type'] == 'vf' || device.stringAttributes['nic.k8s.io/type'] == 'pf'"
---
# Request a VLAN interface on VLAN 2000
apiVersion: resource.k8s.io/v1alpha2
kind: DeviceClass
metadata:
  name: vlan-2000
requirements:
- deviceSelector: "device.driverName == 'sriov.example.com' && device.stringAttributes['k8s.io/type'] == 'vlan'"
config:
- opaque:
    driverName: sriov.example.com
    parameters:
      ## Parameters to configure an sriov.example.com driver that manages VLAN interfaces.
      ## An admission webhook of the vendor could check this configuration in advance
      ## because it is clearly marked as "configuration for driver sriov.example.com".
      ## Without such a webhook, the kubelet plugin needs to check these settings.
      ## They will be marked as coming from the admin.
      apiVersion: sriov.example.com/v1
      kind: VLANInterfaceConfig
      vlanID: 2000
    # The fictional NIC KEP could also add an in-tree type for "NIC configuration",   which
    # then would replace the "vendor" entry above:
    # nic:
    #   vlanID: 2000
