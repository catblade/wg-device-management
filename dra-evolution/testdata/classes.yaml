# Any Foozer device, assuming all are managed by the same driver.
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-foozer
filter:
  devices:
    driverName: example.com-foozer
---
# A Foozer 1000 device
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-foozer-1000
filter:
  devices:
    driverName: example.com-foozer
    selector: "device.string['model'] == 'foozer-1000'"
---
# Any Barzer device
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-barzer
filter:
  devices:
    driverName: example.com-barzer
---
# Any example.com GPU, even though Foozer and
# Barzer GPUs use different drivers.
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-gpu
filter:
  devices:
    selector: "'example.com-foozer' in device.string || 'example.com-barzer' in device.string"
---
# An example.com SR-IOV NIC
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-nic
filter:
  devices:
    driverName: example.com-sriov
---
# An example.org SR-IOV NIC (different vendor)
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.org-sriov-nic
filter:
  devices:
    driverName: example.org-sriov
---
# Request any SR-IOV NIC. This will allow the claim to be satisfied by
# example.com or example.org NICs.
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: sriov-nic
filter:
  devices:
    selector: "'example.com-sriov' in device.string || 'example.org-sriov' in device.string"
---
# Example.com SR-IOV NIC on a 1Gbps link
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-nic-1g
filter:
  devices:
    driverName: example.com-sriov
    selector: "device.quantity['bandwidth'].compareTo(quantity('1G')) == 0"
---
# Request an example.com 10Gbps SR-IOV NIC.
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-nic-10g
filter:
  devices:
    driverName: example.com-sriov
    selector: "device.quantity['bandwidth'].compareTo(quantity('10G')) == 0"
---
# Request an example.com 1Gbps or faster SR-IOV NIC.
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-nic-1g-or-faster
filter:
  devices:
    driverName: example.com-sriov
    selector: "device.quantity['bandwidth'].compareTo(quantity('1G')) >= 0"
---
#######
# NOTE: We cannot create a class that is "any 1G NIC", because a class with a
# selector cannot also have a claim detail, which contains the constraints.
# Instead, we would need to create per-vendor classes with a particular label
# (e.g., bandwidth=1G) and then create an aggregate class from those. This is
# not great, but maybe acceptable for now.
#
# *Claims* can still add the Constraints; we just can't do it in the class.
#######
#
# Request an example.com PF
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-pf
filter:
  devices:
    driverName: example.com-sriov
    selector: "device.string['sriovType'] == 'pf'"
---
# Request an example.com VF
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: example.com-sriov-vf
filter:
  devices:
    driverName: example.com-sriov
    selector: "device.string['sriovType'] == 'vf'"
---
########
## NOTE: We cannot create a class for example.org PF or VF, because instead of
## using attributes, they use custom vf/pf resource types to control this. Claims
## can request one or the other by using `requests`.
########
#
# Request a VLAN interface on VLAN 2000
apiVersion: resource.k8s.io/v1alpha2
kind: ResourceClass
metadata:
  name: vlan-2000
filter:
  devices:
    selector: "device.string['type.k8s.io'] == 'vlan'"
claimConfig:
  vendor:
  - parameters:
      ## ConfigMap to configure a DRA driver that manages VLAN interfaces.
      ## NOTE: How do we control permissions on what these configs can do?
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: default
        name: vlan-driver-vlan-2000
      data:
        vlanID: 2000
